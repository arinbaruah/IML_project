---
title: "Maji Safi analysis"
author: "Arindom Baruah"
format: html
---

```{r}
library(tidyverse) 
library(randomForest)
library(sf)
library(rnaturalearth)
library(ggplot2)
library(plotly)
library(tidymodels)
```


```{r}
#| echo: true
#| message: false
#| warning: false


library(tidyverse)
library(tidymodels)
library(ggplot2)
library(kableExtra)
library(ggfortify)
library(plotly)
library(discrim)
library(viridis)
library(yardstick)
library(rpart)
library(rpart.plot)
library(vip)
library(caret)
library(GGally)
library(detourr)
library(crosstalk)
```






```{r}

set.seed(1148)
water <- read_csv("data/water_train.csv") |> 
  mutate(status_id = factor(status_id)) 
water_test <- read_csv("data/water_test.csv") 

```

```{r}
#| eval: false

rf_fit <- randomForest(status_id ~ ., data = water[,-1], 
  importance = TRUE) 

rf_fit 
water_ts_pred <- water_test |> 
  bind_cols(predict(rf_fit, newdata=water_test, type = "prob")) |> 
  mutate(pstatus_id = predict(rf_fit, newdata=water_test, 
    type="response")) 
write_csv(water_ts_pred[,c("ID", "pstatus_id")], file="predictions1.csv")
```



```{r}

total_counts <- water %>% group_by(water_tech_category,status_id) %>% summarise(Water_presence = n())

ggplot(data = total_counts,aes(x = status_id,y = Water_presence)) + 
  geom_col() + facet_wrap(~water_tech_category) + geom_label(aes(label = Water_presence)) + theme_classic()
```

```{r}

water_label <- water %>% group_by(water_tech_category) %>% count(status_id) %>% mutate(pct = paste0((round(n/sum(n)*100, 2))," %"))

ggplot(data = water_label,aes(y = water_tech_category,x = n,fill = status_id)) + 
  geom_col(position = "fill",color = "black") + 
  geom_text(aes(label = pct), position = position_fill(vjust = 0.5))
```


```{r}
# Sample data for demonstration
# You should replace this with your own dataset
# Example data with latitude and longitude


my_sf <- read_sf("data/Africa_Boundaries.shp")

ggplot(my_sf) +
  geom_sf(fill = "cornsilk", color = "black") +
  geom_point(data = water, aes(x = lon, y = lat,color = status_id,shape = status_id), size = 3,alpha=0.2) +
  theme_minimal() +
  theme_void() + coord_sf(xlim = c(14.43, 35.45), ylim = c(2.22, 20))

```

```{r}

ggplot(my_sf) +
  geom_sf(fill = "cornsilk", color = "black") +
  geom_point(data = water %>% filter(status_id == "y"), aes(x = lon, y = lat),shape = 2, size = 3,alpha = 0.1,color = "blue") +
  theme_minimal() +
  theme_void() + coord_sf(xlim = c(14.43, 35.45), ylim = c(2.22, 20))
```





```{r}
water_timeline <- water %>% group_by(year(report_date),status_id) %>% summarise(Reports = n())
```

```{r}
water_timeline_score <- water %>% group_by(report_date,water_tech_category) %>% summarise(Median_staleness = median(staleness_score),
                                                                                              Median_crucialness =  median(crucialness_score),
                                                                                              Median_pressure = median(pressure_score))

water_timeline_score_long <- water_timeline_score %>% pivot_longer(cols = Median_staleness: Median_pressure,names_to = "Score_type",values_to = "Score")

ggplot(data =water_timeline_score_long,aes(x = report_date,y = Score)) + geom_line() + facet_grid(Score_type~water_tech_category)
```
In the WPDX water data, the "staleness score" typically refers to the freshness or recency of the data. It is an indicator of how recent the data entry or update was made for a particular water point.



```{r}
ggplot(data = water, aes(water_point_population)) + geom_boxplot() + facet_grid(pay~is_urban)

ggplot(data = water, aes(local_population_1km)) + geom_boxplot() + facet_grid(pay~is_urban)
```


In the WPDX (Water Point Data Exchange) data, the "water point population" typically refers to the number of people served or benefiting from a particular water point. This metric provides an estimate of the population that relies on the water point for access to clean water.

Water point population data is crucial for assessing the impact of water projects, planning for future infrastructure development, and allocating resources effectively to ensure adequate access to clean water for communities.

The water point population can vary depending on factors such as the size of the community served by the water point, the distance to alternative water sources, and the reliability and capacity of the water point infrastructure.

To understand the water point population in WPDX data, you would typically refer to the documentation or metadata provided by WPDX, which should describe how the water point population is recorded and what it represents in the context of the dataset. If you have access to the dataset, you can also examine the structure and content of the data to identify the water point population field or variable and its values.


```{r}
ggplot(data = water, aes(local_population_1km)) + geom_boxplot() + facet_grid(water_tech_category~is_urban,scales = "free_x")
```

```{r}
tech_installs <- water %>% filter(install_year < 2024) %>% group_by(install_year,water_tech_category,status_id) %>% summarise(Total_installed = n()) 

ggplotly(ggplot(data = tech_installs,aes(x = install_year,y = Total_installed,color = status_id)) + geom_line() + facet_wrap(status_id~water_tech_category))
```


```{r}
reach <- water %>% group_by(year(report_date),water_tech_category,status_id) %>% summarise(median(water_point_population),
                                                                           median(local_population_1km)) %>% 
  pivot_longer(cols = "median(water_point_population)":"median(local_population_1km)",names_to = "population_type",values_to = "population_reach")

ggplot(data = reach,aes(x = `year(report_date)`,y = population_reach,color = status_id)) + geom_line(alpha=0.4) + geom_point() + facet_wrap(population_type ~ water_tech_category) 
```
```{r}

water_tech_long <- water %>% filter(year(report_date) >=2018) %>% pivot_longer( 
                                          cols = distance_to_primary_road:distance_to_town,
                                          names_to = "distance_type",
                                          values_to = "distance") %>% select(c(water_tech_category,distance_type,distance))

ggplot(data = water_tech_long,aes(y = distance_type , x = distance )) + geom_boxplot() + facet_grid(~water_tech_category)
```

```{r}

water_tech_long <- water %>% filter(year(report_date) < 2018) %>% pivot_longer( 
                                          cols = distance_to_primary_road:distance_to_town,
                                          names_to = "distance_type",
                                          values_to = "distance") %>% select(c(water_tech_category,distance_type,distance))

ggplot(data = water_tech_long,aes(y = distance_type , x = distance )) + geom_boxplot() + facet_grid(~water_tech_category)
```


```{r}
ggplot(data = water %>% filter(year(report_date) >= 2014), aes(local_population_1km)) + geom_boxplot() + 
  facet_grid(water_tech_category~is_urban,scales = "free_x")
```

```{r}
ggplot(data = water, aes(local_population_1km)) + geom_boxplot() + 
  facet_wrap(water_tech_category~pay,ncol=1)
```





```{r}
#| echo: true

xgb_spec <- boost_tree(min_n = 4) |>
  set_mode("classification") |>
  set_engine("xgboost")
p_fit_xgb <- xgb_spec |> 
  fit(status_id ~ ., data = water %>% select(-ID))

```


```{r}

water_ts_pred <- water_test |> 
  bind_cols(predict(p_fit_xgb, new_data=water_test, type="prob")) |> 
  mutate(pstatus_id = if_else(.pred_n >=0.5,"n","y")) 
write_csv(water_ts_pred[,c("ID", "pstatus_id")], file="predictions3.csv")

```

```{r}
rf_fit <- randomForest(status_id ~ ., data = water[,-1], 
  importance = TRUE)

water_ts_pred <- water_test |> 
  bind_cols(predict(rf_fit, newdata=water_test, type="prob")) |> 
  mutate(pstatus_id = predict(rf_fit, newdata=water_test, 
    type="response")) 
write_csv(water_ts_pred[,c("ID", "pstatus_id")], file="predictions1.csv")
```
____________


# Tune Random Forest model

```{r}

set.seed(1148)
water <- read_csv("data/water_train.csv") |> 
  mutate(status_id = factor(status_id)) 
water_test <- read_csv("data/water_test.csv") 

```

```{r}
water <- water %>% select(-is_urban,pressure_score,lat,lon,report_date)
water_test <- water_test %>% select(-is_urban,water_point_population,lat,lon,report_date)
```


```{r}

tune_spec <- rand_forest(
  mtry = tune(),
  trees = 500,
  min_n = tune()
) %>%
  set_mode("classification") %>%
  set_engine("ranger")


```


```{r}
tune_wf <- workflow() %>%
  add_model(tune_spec) %>%
  add_formula(status_id~.)
```



```{r}
rf_grid <- grid_regular(
  mtry(range = c(5, 30)),
  min_n(range = c(2, 8)),
  levels = 5
)

rf_grid
```
```{r}
set.seed(1148)

water$report_date <- year(water$report_date)
cell_folds <- vfold_cv(water[,-1],v = 5)
```


```{r}
#| echo: true


doParallel::registerDoParallel()
set.seed(1148)


rf_res <- 
  tune_wf %>% 
  tune_grid(
    resamples = cell_folds,
    grid = rf_grid
    )
```

```{r}
library(kableExtra)
rf_res %>% 
  collect_metrics() %>% head() %>% kbl()
```


```{r}
best_acc <- select_best(rf_res, "accuracy")

final_rf <- finalize_model(
  tune_spec,
  best_acc
)

final_rf
```

```{r}
rf_fit_tune <- final_rf %>%
  fit(status_id~.,data = water[,-1])
```


```{r}

water_test$report_date <- year(water_test$report_date)

water_ts_pred <- water_test |> 
  bind_cols(predict(rf_fit_tune, new_data=water_test, type="prob")) |> 
  mutate(pstatus_id = if_else(.pred_n >=0.35,"n","y")) 
write_csv(water_ts_pred[,c("ID", "pstatus_id")], file="predictions10.csv")
```





------------------------



```{r}
library(doParallel)
all_cores <- parallel::detectCores(logical = FALSE)
registerDoParallel(cores = all_cores)

```
```{r}
library(rsample)
library(recipes)
library(parsnip)
library(tune)
library(dials)
library(workflows)
library(yardstick)
```

```{r}
# preprocessing "recipe"
preprocessing_recipe <- 
  recipes::recipe(status_id ~ ., data = water[,-1]) %>%
  # convert categorical variables to factors
  recipes::step_string2factor(all_nominal()) %>%
  # combine low frequency factor levels
  recipes::step_other(all_nominal(), threshold = 0.01) %>%
  # remove no variance predictors which provide no predictive information 
  recipes::step_nzv(all_nominal()) %>%
  prep()
```


```{r}
xgb_spec <- boost_tree(
  trees = 1000,
  tree_depth = tune(), min_n = tune(),
  loss_reduction = tune(),                     ## first three: model complexity
  sample_size = tune(), mtry = tune(),         ## randomness
  learn_rate = tune()                          ## step size
) %>%
  set_engine("xgboost") %>%
  set_mode("classification")

xgb_spec
```


```{r}
xgb_grid <- grid_latin_hypercube(
  tree_depth(),
  min_n(),
  loss_reduction(),
  sample_size = sample_prop(),
  finalize(mtry(), water[,-1]),
  learn_rate(),
  size = 30
)
```


```{r}
xgb_wf <- workflow() %>%
  add_formula(status_id ~ .) %>%
  add_model(xgb_spec)

xgb_wf
```

```{r}
set.seed(1148)
vb_folds <- vfold_cv(water[,-1], strata = status_id,v=5)

vb_folds
```

```{r}
doParallel::registerDoParallel()

set.seed(1148)
xgb_res <- tune_grid(
  xgb_wf,
  resamples = vb_folds,
  grid = xgb_grid,
  control = control_grid(save_pred = TRUE,verbose = TRUE)
)

xgb_res
```

```{r}
show_best(xgb_res, "accuracy")

best_acc<- select_best(xgb_res, "accuracy")
best_acc
```

```{r}
final_xgb <- finalize_workflow(
  xgb_wf,
  best_acc
)

final_xgb
```
```{r}
library(vip)

final_xgb %>%
  fit(data = water[,-1]) %>%
  pull_workflow_fit() %>%
  vip(geom = "point")
```
```{r}

xgb_fit_tune <- final_xgb %>%
  fit(data = water[,-1])
```




```{r}
water_ts_pred <- water_test |> 
  bind_cols(predict(xgb_fit_tune, new_data=water_test, type="prob")) |> 
  mutate(pstatus_id = if_else(.pred_n >=0.35,"n","y")) 
write_csv(water_ts_pred[,c("ID", "pstatus_id")], file="predictions6.csv")

```

