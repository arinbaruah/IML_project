---
title: "Three Interseting Insights from the Water Dataset"
author: "Aishwarya,Arindom,Tashya,Alexandra"
format: html

execute: 
  echo: false
  warning: false
  message: false
---


```{r}
library(tidyverse) 
library(randomForest)
library(sf)
library(rnaturalearth)
library(ggplot2)
library(plotly)
library(tidymodels)
library(ggthemes)

```







```{r}

water <- read_csv("data/water_train.csv") |> 
  mutate(status_id = factor(status_id)) 
water_test <- read_csv("data/water_test.csv") 

```

## Which category of water technology caters to the most number of people?

```{r}

library(leaflet)
library(dplyr)
library(sf)
library(base64enc)

# Filter out rows with invalid coordinates
water <- water %>%
  filter(lat >= -90 & lat <= 90 & lon >= -180 & lon <= 180)

# Filter data to show only points where water_point_population is greater than 20000
water_filtered <- water %>%
  filter(water_point_population > 20000)

# Convert the filtered dataframe to an sf object
water_filtered_sf <- st_as_sf(water_filtered, coords = c("lon", "lat"), crs = 4326)

# Define breaks and colors based on total population
breaks <- c(0, 500, 1000, 5000, 10000, 20000, Inf)
colors <- c("blue", "green", "yellow", "orange", "red", "purple")

# Create a function to assign colors based on population density
assign_color <- function(x) {
  colors[findInterval(x, breaks, all.inside = TRUE)]
}

# Function to create custom SVG for markers
customSVG <- function(shape, color) {
  if (shape == "triangle") {
    return(paste0(
      "data:image/svg+xml;base64,", base64enc::base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
          "<polygon points='12,0 24,24 0,24' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  } else if (shape == "square") {
    return(paste0(
      "data:image/svg+xml;base64,", base64enc::base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
          "<rect width='24' height='24' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  } else {
    return(paste0(
      "data:image/svg+xml;base64,", base64enc::base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
          "<circle cx='12' cy='12' r='12' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  }
}

# Define the shapes for the categories
shapes <- list(
  "Hand Pump" = "circle",
  "Motorized Pump" = "triangle",
  "Public Tapstand" = "square"
)

# Create the leaflet map
map <- leaflet() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = mean(st_coordinates(water_filtered_sf)[,1]), lat = mean(st_coordinates(water_filtered_sf)[,2]), zoom = 6)

# Add markers for each water_tech_category
for (category in unique(water_filtered$water_tech_category)) {
  shape <- shapes[[category]]
  data_subset <- water_filtered_sf[water_filtered_sf$water_tech_category == category, ]
  
  if (shape == "circle") {
    map <- map %>% addCircleMarkers(
      data = data_subset,
      lng = ~st_coordinates(data_subset)[,1],
      lat = ~st_coordinates(data_subset)[,2],
      fillColor = ~assign_color(water_point_population),
      fillOpacity = 1,
      color = "black",
      radius = 2, # Reduced size
      stroke = TRUE,
      weight = 1,
      label = ~water_tech_category,
      popup = ~paste("Total Population:", water_point_population, "<br>", "Tech Category:", water_tech_category)
    )
  } else {
    for (i in seq_len(nrow(data_subset))) {
      svg_icon <- customSVG(shape, assign_color(data_subset$water_point_population[i]))
      icon <- makeIcon(iconUrl = svg_icon, iconWidth = 6, iconHeight = 6) # Reduced size
      map <- map %>% addMarkers(
        lng = st_coordinates(data_subset)[i,1],
        lat = st_coordinates(data_subset)[i,2],
        icon = icon,
        label = data_subset$water_tech_category[i],
        popup = paste("Total Population:", data_subset$water_point_population[i], "<br>", "Tech Category:", data_subset$water_tech_category[i])
      )
    }
  }
}

# Add legend for population density
map <- map %>%
  addLegend(
    "bottomright", 
    colors = colors,
    labels = c("0-500", "501-1000", "1001-5000", "5001-10000", "10001-20000", "20001+"),
    title = "Total Water Point Population",
    opacity = 1
  )

# Function to create dummy SVG icons for the legend
legendSVG <- function(shape) {
  if (shape == "triangle") {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
      "<polygon points='12,0 24,24 0,24' style='fill:black;' />",
      "</svg>"
    ))
  } else if (shape == "square") {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
      "<rect width='24' height='24' style='fill:black;' />",
      "</svg>"
    ))
  } else {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24'>",
      "<circle cx='12' cy='12' r='12' style='fill:black;' />",
      "</svg>"
    ))
  }
}

# Create legend items for shapes
shape_legend <- lapply(names(shapes), function(cat) {
  htmltools::HTML(paste0("<div style='display: inline-block; width: 12px; height: 12px;'>", legendSVG(shapes[[cat]]), "</div> ", cat))
})

# Add legend for shapes
map <- map %>%
  addControl(htmltools::HTML(paste(shape_legend, collapse = "<br>")), position = "bottomleft")

# Display the map
map

```


## What amount of population has benefitted from the water technology installations ?

<div style="border: 2px solid #4CAF50; border-radius: 5px; background-color: #DFF0D8; padding: 15px; margin: 20px 0;">

- The median local population within 1 km and water point populations for hand pumps and public tapstands __dropped after 2018 while it was on the rise for motorised pumps for the same period.__

- Does that mean the installations are happening away from the cities where the general population is much lower ?

</div>

```{r}
reach <- water %>% group_by(year(report_date),water_tech_category,status_id) %>% summarise("Median water point population" = median(water_point_population), "Median local population (1 km)" = median(local_population_1km)) %>% 
  pivot_longer(cols = "Median water point population":"Median local population (1 km)",names_to = "population_type",values_to = "population_reach")

pl <- ggplot(data = reach,
       aes(x = factor(`year(report_date)`), y = population_reach, color = status_id,group = status_id)) + geom_line(alpha =
                                                                                            0.4) + geom_point() + facet_wrap(population_type ~ water_tech_category) + theme_minimal() + theme(axis.text.x = element_text(angle = 45),plot.background = element_rect(fill = "cornsilk"),plot.title = element_text(hjust = 0.5),legend.text = element_text(size = 6),legend.title = element_text(size = 7)) +
  scale_color_manual(values = c("y" = "steelblue", "n" = "darkred")) + labs(x = "Report Year",y = "Population reach",title = "What amount of the population has benefited \n from the water technology installations?",caption = "Source: Water point data exchange (Wpdx)",color = "Water presence")

pl
```
## Are the recent installations moving away from the cities and focussing on regional areas ?

<div style="border: 2px solid #4CAF50; border-radius: 5px; background-color: #DFF0D8; padding: 15px; margin: 20px 0;">

- For hand-pumps and public tapstands, the median distance from the cities have increased post 2019. __This indicates that the recent installations are moving away from the cities, possibly targetting the regional areas.__

- On the other hand, we see that the median distance for motorised pumps lie around the 25 km mark for the recent as well as the previous installations. __This indicates that the recent motorised pump installations are still close to the cities__, due to which the water point and local population within 1 km is on the rise.

</div>

```{r}

water_tech_long <- water %>% mutate(period = if_else(year(report_date) >=2019,"Post 2019","Pre 2019")) %>% pivot_longer( 
                                          cols = distance_to_primary_road:distance_to_town,
                                          names_to = "distance_type",
                                          values_to = "distance") %>% select(c(water_tech_category,distance_type,distance,period))

water_tech_clean <- water_tech_long %>% mutate(distance_type_clean = case_when(distance_type == "distance_to_primary_road" ~ "Distance to primary road",
                                               distance_type == "distance_to_secondary_road" ~ "Distance to secondary road",
                                               distance_type == "distance_to_tertiary_road" ~ "Distance to tertiary road",
                                               distance_type == "distance_to_city" ~ "Distance to city",
                                               distance_type == "distance_to_town" ~ "Distance to town"))

ggplot(data = water_tech_clean,aes(y = distance_type_clean , x = distance/1000,color = period)) + geom_boxplot() + facet_grid(period~water_tech_category) + labs(title = "Distribution of distances from the water source \n pre and post 2019",x = "Distance (in Km)",y = "Type of distance measured",caption = "Source: Water point data exchange (Wpdx)") +  theme_minimal() + theme(axis.text.x = element_text(angle = 45),plot.background = element_rect(fill = "cornsilk"),legend.position = "none") + scale_color_canva(palette = "Summer inspired")
```


## Are there differences in predictions depending on models?

We found interesting differences in predictions for certain features between XGBoost and Randomforest Models:

```{r}
rf_pred <- read_csv("data/final_prediction.csv")
boost_pred <- read_csv("data/xgboost_predictions_int.csv")

rf_merged_df <- merge(rf_pred, water_test, by = "ID", all.x = TRUE)
merged_df_boost <- merge(boost_pred, water_test, by = "ID", all.x = TRUE)
```


# Distribution of Water Availability Predictions across Installation Years

•⁠  ⁠XGboost predicted higher counts of Y in the peak period of installation of water points than RF
•⁠  ⁠RF predicted higher counts of N in the peak period of water point installations than XGboost

```{r}
install_year_distribution <- rf_merged_df |>
  group_by(pstatus_id, install_year) |>
  summarise(count = n()) |>
  ungroup()

install_year_distribution_boost <- merged_df_boost |>
  group_by(pstatus_id, install_year) |>
  summarise(count = n()) |>
  ungroup()


# RANDOMFOREST plot
install_plotly <- ggplot(install_year_distribution, aes(x = install_year, y = count, color = paste("Random Forest -", pstatus_id))) +
  geom_line() +
  scale_color_manual(values = c("Random Forest - y" = "seagreen3", "Random Forest - n" = "tomato")) +
  labs(
    title = "RANDOMFOREST: Water Availability Predictions Across Installation Year",
    x = "Installation Year",
    y = "Count",
    color = "Water Availability Prediction"
  ) +
  theme_minimal()

p_plotly <- ggplotly(install_plotly)

# XGBOOSTED plot
install_plotly_boosted <- ggplot(install_year_distribution_boost, aes(x = install_year, y = count, color = paste("XGBoosted -", pstatus_id))) +
  geom_line() +
  scale_color_manual(values = c("XGBoosted - y" = "lightblue", "XGBoosted - n" = "red")) +
  labs(
    title = "XGBOOSTED: Water Availability Predictions Across Installation Year",
    x = "Installation Year",
    y = "Count",
    color = "Water Availability Prediction"
  ) +
  theme_minimal()

p_plotly_boost <- ggplotly(install_plotly_boosted)

# Combining the plots 
combined_plot <- subplot(p_plotly, p_plotly_boost) %>%
  layout(
    title = "Distribution of Water Availability Across Installation Years",
    legend = list(x = 0.5, y = -0.2, orientation = "h", xanchor = "center")  
  )

combined_plot
```



# Distribution of Water Availability Predictions across Water Technology Categories

•⁠ ⁠Both models predict high availability ('y') for hand pumps, XGBoost predicting even higher than RF.
• Noticeable difference in predictions for motorized pumps, XGBoost predicted higher 'y' and RF predicted higher 'n'.


```{r}
# water tech categories and random forest model
rf_p <- ggplot(rf_merged_df, aes(fill=paste("Random Forest -", pstatus_id), x=water_tech_category)) + 
    geom_bar(position="dodge") +
    scale_fill_manual(values=c("Random Forest - y" = "seagreen3", "Random Forest - n" = "tomato")) +
    theme_minimal() +
    labs(x="Water Technology Categories", 
         y="Count", 
         fill="Water Availability Predictions") +
    ggtitle("Distribution of Water Availability across Water Technology Categories in Central Africa") +
  theme(plot.title = element_text(hjust = 0.5))

# Convert to plotly
rf_plotly <- ggplotly(rf_p)

# water tech categories and xgboost

xgboost_p <- ggplot(merged_df_boost, aes(fill=paste("Boosted Tree -", pstatus_id), x=water_tech_category)) + 
    geom_bar(position="dodge") +
    scale_fill_manual(values=c("Boosted Tree - y" = "steelblue", "Boosted Tree - n" = "firebrick")) +
    theme_minimal() +
    labs(x="Water Technology Categories", 
         y="Count", 
         fill="Water Availability Predictions") +
    ggtitle("Distribution of Water Availability across Water Technology Categories in Central Africa") +
  theme(plot.title = element_text(hjust = 0.5))

# Convert to plotly
xgboost_plotly <- ggplotly(xgboost_p)

# combining the plots
subplot(rf_plotly, xgboost_plotly, nrows = 2)
```

