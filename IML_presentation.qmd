---
title: "IML Presentation"
author: "Group 3"
format: html
---

```{r}
library(tidyverse) 
library(randomForest)
library(sf)
library(rnaturalearth)
library(ggplot2)
library(plotly)
library(tidymodels)
```


```{r}

water <- read_csv("data/water_train.csv") |> 
  mutate(status_id = factor(status_id)) 
water_test <- read_csv("data/water_test.csv") 

```



# Aish's part

```{r}

library(leaflet)
library(dplyr)
library(sf)
library(base64enc)


# Filter out rows with invalid coordinates
water <- water %>%
  filter(lat >= -90 & lat <= 90 & lon >= -180 & lon <= 180)

# Filter data to show only points where water_point_population is greater than 20000
water_filtered <- water %>%
  filter(water_point_population > 20000)

# Convert the filtered dataframe to an sf object
water_filtered_sf <- st_as_sf(water_filtered, coords = c("lon", "lat"), crs = 4326)

# Define breaks and colors based on total population
breaks <- c(0, 500, 1000, 5000, 10000, 20000, Inf)
colors <- c("blue", "green", "yellow", "orange", "red", "purple")

# Create a function to assign colors based on population density
assign_color <- function(x) {
  colors[findInterval(x, breaks, all.inside = TRUE)]
}

# Function to create custom SVG for markers
customSVG <- function(shape, color) {
  if (shape == "triangle") {
    return(paste0(
      "data:image/svg+xml;base64,", base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
          "<polygon points='12,0 24,24 0,24' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  } else if (shape == "square") {
    return(paste0(
      "data:image/svg+xml;base64,", base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
          "<rect width='24' height='24' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  } else {
    return(paste0(
      "data:image/svg+xml;base64,", base64encode(charToRaw(
        paste0(
          "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
          "<circle cx='12' cy='12' r='12' style='fill:", color, ";' />",
          "</svg>"
        )
      ))
    ))
  }
}

# Define the shapes for the categories
shapes <- list(
  "Hand Pump" = "circle",
  "Motorized Pump" = "triangle",
  "Public Tapstand" = "square"
)

# Create the leaflet map
map <- leaflet() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = mean(st_coordinates(water_filtered_sf)[,1]), lat = mean(st_coordinates(water_filtered_sf)[,2]), zoom = 6)

# Add markers for each water_tech_category
for (category in unique(water_filtered$water_tech_category)) {
  shape <- shapes[[category]]
  data_subset <- water_filtered_sf[water_filtered_sf$water_tech_category == category, ]
  
  if (shape == "circle") {
    map <- map %>% addCircleMarkers(
      data = data_subset,
      lng = ~st_coordinates(data_subset)[,1],
      lat = ~st_coordinates(data_subset)[,2],
      fillColor = ~assign_color(water_point_population),
      fillOpacity = 1,
      color = "black",
      radius = 4,
      stroke = TRUE,
      weight = 1,
      label = ~water_tech_category,
      popup = ~paste("Total Population:", water_point_population, "<br>", "Tech Category:", water_tech_category)
    )
  } else {
    for (i in seq_len(nrow(data_subset))) {
      svg_icon <- customSVG(shape, assign_color(data_subset$water_point_population[i]))
      icon <- makeIcon(iconUrl = svg_icon, iconWidth = 10, iconHeight = 10)
      map <- map %>% addMarkers(
        lng = st_coordinates(data_subset)[i,1],
        lat = st_coordinates(data_subset)[i,2],
        icon = icon,
        label = data_subset$water_tech_category[i],
        popup = paste("Total Population:", data_subset$water_point_population[i], "<br>", "Tech Category:", data_subset$water_tech_category[i])
      )
    }
  }
}

# Add legend for population density
map <- map %>%
  addLegend(
    "bottomright", 
    colors = colors,
    labels = c("0-500", "501-1000", "1001-5000", "5001-10000", "10001-20000", "20001+"),
    title = "Total Water Point Population",
    opacity = 1
  )

# Function to create dummy SVG icons for the legend
legendSVG <- function(shape) {
  if (shape == "triangle") {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
      "<polygon points='12,0 24,24 0,24' style='fill:black;' />",
      "</svg>"
    ))
  } else if (shape == "square") {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
      "<rect width='24' height='24' style='fill:black;' />",
      "</svg>"
    ))
  } else {
    return(paste0(
      "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'>",
      "<circle cx='12' cy='12' r='12' style='fill:black;' />",
      "</svg>"
    ))
  }
}

# Create legend items for shapes
shape_legend <- lapply(names(shapes), function(cat) {
  htmltools::HTML(paste0("<div style='display: inline-block; width: 24px; height: 24px;'>", legendSVG(shapes[[cat]]), "</div> ", cat))
})

# Add legend for shapes
map <- map %>%
  addControl(htmltools::HTML(paste(shape_legend, collapse = "<br>")), position = "bottomleft")

# Display the map
map


```



# Rin's part



# Tash's part



# Alex's part